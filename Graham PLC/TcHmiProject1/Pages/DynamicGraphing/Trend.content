<div id="Trend" data-tchmi-type="TcHmi.Controls.System.TcHmiContent" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width="100" data-tchmi-height="100" data-tchmi-width-unit="%" data-tchmi-height-unit="%" data-tchmi-creator-viewport-width="800" data-tchmi-creator-viewport-height="600">
<div id="TcHmiTrendLineChart" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTrendLineChart" data-tchmi-end="Latest" data-tchmi-height="80" data-tchmi-height-unit="%" data-tchmi-left="0" data-tchmi-left-unit="px" data-tchmi-top="0" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-x-axis-name="x-axis 1" data-tchmi-x-sub-tick-steps="4" data-tchmi-y-sub-tick-steps="4" data-tchmi-visibility="Visible" data-tchmi-show-legend="true" data-tchmi-show-menu-bar="true" data-tchmi-menu-bar-position="Top" data-tchmi-show-x-axis-name="true" data-tchmi-start="PT1m">





<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "%i%MyTrendData%/i%",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "// get control",
          "var ctrl = TcHmi.Controls.get(\"TcHmiTrendLineChart\");",
          "",
          "// internal symbol with historized symbol names / properties",
          "var symb = new TcHmi.Symbol(\"%i%MyTrendData%/i%\");",
          "",
          "// value of internal symbol",
          "var val;",
          "",
          "// line graph descriptions object",
          "var desc = [];",
          "",
          "//History settings",
          "        var settings = {",
          "    INTERVAL: 'PT0.1S', ",
          "    MAXENTRIES: 10000, ",
          "    ROWLIMIT: 10000, ",
          "    RECORDINGENABLED: true, ",
          "        };",
          "",
          "// read internal symbol",
          "symb.readEx(function (data) {",
          "    // get value",
          "    val = data.value;",
          "    // successful read",
          "    if (val) {",
          "",
          "",
          "",
          "",
          "        // loop through internal symbol array",
          "        val.forEach(e => {",
          "",
          "",
          "            // if enabled",
          "            if (e.Enabled) {",
          "",
          "                TcHmi.Server.Historize.addEx2(e.Name, settings, { domain: 'TcHmiSqliteHistorize' }, {timeout: 2000}, function (data2) {",
          "                if (data2.error === TcHmi.Errors.NONE) {",
          "                    console.log('Worked');",
          "                \t // add symbol/properties to line graph description",
          "                \tdesc.push({ symbol: e.Name, lineWidth: 2, lineColor: e.Color, yAxisId: 1 });",
          "                \t",
          "                \t        // write to line graph descriptions to line graph control",
          "       \t\t\t\t ctrl.setLineGraphDescriptions(desc);",
          "                } else {",
          "                    console.error('Not working ' + data.error);",
          "                }",
          "            \t});",
          "",
          "            }",
          "            else",
          "            \t{",
          "            \tctrl.setLineGraphDescriptions(desc);",
          "            }",
          "        });",
          "",
          "",
          "    }",
          "});"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>



<script data-tchmi-target-attribute="data-tchmi-y-axis" type="application/json">
[
  {
    "id": 1,
    "showAxis": true,
    "position": "Left",
    "mainTickMinValue": 0.0,
    "mainTickMaxValue": 400.0,
    "showLabels": true,
    "showAxisName": true,
    "axisName": "y-axis",
    "axisNameFontFamily": null,
    "axisNameFontSize": 15,
    "axisNameFontSizeUnit": "px",
    "axisNameFontWeight": "Bold",
    "decimalPlaces": 2,
    "unit": "",
    "autoScaling": false,
    "logarithmicScale": false,
    "axisLabeling": "Number",
    "labelFontColor": {
      "color": "rgba(71, 148, 218, 1)"
    },
    "axisColor": {
      "color": "rgba(71, 148, 218, 1)"
    },
    "axisNameFontColor": {
      "color": "rgba(71, 148, 218, 1)"
    }
  }
]
</script>
</div>
<div id="TcHmiDatagrid" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiDatagrid" data-tchmi-height="20" data-tchmi-height-unit="%" data-tchmi-left="0" data-tchmi-left-unit="%" data-tchmi-top-unit="%" data-tchmi-width="100" data-tchmi-width-unit="%" data-tchmi-src-data="%i%MyTrendData|BindingMode=TwoWay%/i%" data-tchmi-bottom="0" data-tchmi-bottom-unit="%">
<script data-tchmi-target-attribute="data-tchmi-src-column" type="application/json">
[
  {
    "name": "Name",
    "label": "Symbol Name",
    "control": "TextBox",
    "width": 200,
    "widthUnit": "px",
    "resize": true,
    "sortable": false,
    "minWidth": 100,
    "minWidthUnit": "px",
    "editable": true,
    "horizontalAlignment": "Center",
    "verticalAlignment": "Center",
    "headerHorizontalAlignment": "Center",
    "headerVerticalAlignment": "Center",
    "ignoreEscapeSequences": false,
    "autoFocusOut": true,
    "autoSelectText": false
  },
  {
    "name": "Enabled",
    "label": "Enabled",
    "control": "CheckBox",
    "width": 70,
    "widthUnit": "px",
    "resize": true,
    "sortable": true,
    "minWidth": 70,
    "minWidthUnit": "px",
    "editable": true,
    "horizontalAlignment": "Center",
    "verticalAlignment": "Center",
    "headerHorizontalAlignment": "Center",
    "headerVerticalAlignment": "Center",
    "ignoreEscapeSequences": false,
    "autoFocusOut": true,
    "autoSelectText": false
  },
  {
    "name": "Color[color]",
    "label": "Line Color",
    "control": "TextBox",
    "width": 100,
    "widthUnit": "px",
    "resize": false,
    "sortable": false,
    "minWidth": 5,
    "minWidthUnit": "px",
    "editable": true,
    "horizontalAlignment": "Center",
    "verticalAlignment": "Center",
    "headerHorizontalAlignment": "Center",
    "headerVerticalAlignment": "Center",
    "ignoreEscapeSequences": false,
    "autoFocusOut": true,
    "autoSelectText": false
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-cell-content-padding" type="application/json">
{
  "left": 3,
  "leftUnit": "px",
  "right": 3,
  "rightUnit": "px",
  "top": 0,
  "topUnit": "px",
  "bottom": 0,
  "bottomUnit": "px"
}
</script>


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiDatagrid.onDataChanged",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": false,
        "sourceLines": [],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  },
  {
    "event": "TcHmiDatagrid.onAttached",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var ctrl = TcHmi.Controls.get(\"TcHmiDatagrid\");",
          "var elem = ctrl.getElement();",
          "if (elem) {",
          "\tsetTimeout(function () {",
          "\t           \t",
          "\t\t// get second tbody element in data grid",
          "\t\tvar table = $(elem).find(\"tbody\")[1];",
          "\t\t",
          "\t\t// for each row in table",
          "\t\t$(table).find(\"tr\").each(function(i, tr) {",
          "\t\t\t",
          "\t\t    // for each column in row",
          "\t\t    $(tr).find(\"td\").each(function(j, td) {",
          "\t\t        \t        ",
          "\t          \t// get color column",
          "\t          \tif ($(td).attr(\"data-column-name\") === \"Color[color]\") {",
          "\t     \t\t\t",
          "\t\t        \t// get inner input element",
          "\t\t        \tvar input = $(td).find(\"input\")[0];",
          "\t\t        \t",
          "\t\t        \t// create deep clone",
          "\t\t        \tvar color = $(input).clone(true);",
          "\t\t        \t",
          "\t\t        \t// change input type to color and append to table",
          "\t\t        \tcolor.attr(\"type\", \"color\").appendTo(td);",
          "\t\t        \t\t",
          "\t\t        \t// color change event",
          "\t\t        \tcolor.on(\"change\", function (e) {",
          "debugger;",
          "\t\t\t\t\t\t// set symbol value",
          "\t\t\t\t\t\tvar wrt = \"MyTrendData[\" + i + \"]::Color::color\";",
          "\t\t\t\t\t\tTcHmi.Symbol.write(wrt, TcHmi.SymbolType.Internal, e.target.value, ",
          "\t\t\t                   function(res){ /*console.log(res);*/ });",
          "    \t         \t});",
          "\t \t\t\t}",
          "\t      \t});",
          "\t \t});",
          "\t}, 500);",
          "}"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>
</div>